{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\Certified Tech Developer\\\\Front-End 3\\\\fe3-final-main\\\\src\\\\Components\\\\utils\\\\ContextGlobalProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useMemo, useReducer, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"light\",\n  data: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_THEME\":\n      return { ...state,\n        theme: action.payload\n      };\n\n    case \"SET_DATA\":\n      return { ...state,\n        data: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const ContextGlobal = /*#__PURE__*/createContext(initialState);\n\nconst ContextGlobalProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    const storedTheme = localStorage.getItem(\"theme\");\n\n    if (storedTheme) {\n      dispatch({\n        type: \"SET_THEME\",\n        payload: storedTheme\n      });\n    }\n  }, []);\n  useMemo(async () => {\n    try {\n      const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      const data = await response.json();\n      dispatch({\n        type: \"SET_DATA\",\n        payload: data\n      });\n    } catch (error) {\n      console.error(\"Error fetching API:\", error);\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = state.theme === \"light\" ? \"dark\" : \"light\";\n    localStorage.setItem(\"theme\", newTheme);\n    dispatch({\n      type: \"SET_THEME\",\n      payload: newTheme\n    });\n  };\n\n  const contextValue = useMemo(() => ({\n    theme: state.theme,\n    data: state.data,\n    toggleTheme\n  }), [state.theme, state.data]);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      contextValue\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextGlobalProvider, \"AA9lCSSlFypYn1+2zBJFLR7sR68=\");\n\n_c = ContextGlobalProvider;\nexport default ContextGlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextGlobalProvider\");","map":{"version":3,"names":["createContext","useMemo","useReducer","useEffect","initialState","theme","data","reducer","state","action","type","payload","ContextGlobal","ContextGlobalProvider","children","dispatch","storedTheme","localStorage","getItem","response","fetch","json","error","console","toggleTheme","newTheme","setItem","contextValue"],"sources":["C:/Users/Hp/Certified Tech Developer/Front-End 3/fe3-final-main/src/Components/utils/ContextGlobalProvider.jsx"],"sourcesContent":["import { createContext, useMemo, useReducer, useEffect } from \"react\";\n\nexport const initialState = {\n  theme: \"light\",\n  data: [],\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_THEME\":\n      return {\n        ...state,\n        theme: action.payload,\n      };\n    case \"SET_DATA\":\n      return {\n        ...state,\n        data: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const ContextGlobal = createContext(initialState);\nconst ContextGlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    const storedTheme = localStorage.getItem(\"theme\");\n    if (storedTheme) {\n      dispatch({ type: \"SET_THEME\", payload: storedTheme });\n    }\n  }, []);\n\n  useMemo(async () => {\n    try {\n      const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      const data = await response.json();\n      dispatch({ type: \"SET_DATA\", payload: data });\n    } catch (error) {\n      console.error(\"Error fetching API:\", error);\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = state.theme === \"light\" ? \"dark\" : \"light\";\n    localStorage.setItem(\"theme\", newTheme);\n    dispatch({ type: \"SET_THEME\", payload: newTheme });\n  };\n\n  const contextValue = useMemo(() => ({ theme: state.theme, data: state.data, toggleTheme }), [\n    state.theme,\n    state.data, \n  ]);\n\n  return (\n    <ContextGlobal.Provider value={{ contextValue }}>\n      {children}\n    </ContextGlobal.Provider>\n  );\n};\n\nexport default ContextGlobalProvider;"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,OAAxB,EAAiCC,UAAjC,EAA6CC,SAA7C,QAA8D,OAA9D;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAC1BC,KAAK,EAAE,OADmB;EAE1BC,IAAI,EAAE;AAFoB,CAArB;;AAKP,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACjC,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,WAAL;MACE,OAAO,EACL,GAAGF,KADE;QAELH,KAAK,EAAEI,MAAM,CAACE;MAFT,CAAP;;IAIF,KAAK,UAAL;MACE,OAAO,EACL,GAAGH,KADE;QAELF,IAAI,EAAEG,MAAM,CAACE;MAFR,CAAP;;IAIF;MACE,OAAOH,KAAP;EAZJ;AAcD,CAfD;;AAiBA,OAAO,MAAMI,aAAa,gBAAGZ,aAAa,CAACI,YAAD,CAAnC;;AACP,MAAMS,qBAAqB,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC9C,MAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBb,UAAU,CAACK,OAAD,EAAUH,YAAV,CAApC;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMa,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;;IACA,IAAIF,WAAJ,EAAiB;MACfD,QAAQ,CAAC;QAAEL,IAAI,EAAE,WAAR;QAAqBC,OAAO,EAAEK;MAA9B,CAAD,CAAR;IACD;EACF,CALQ,EAKN,EALM,CAAT;EAOAf,OAAO,CAAC,YAAY;IAClB,IAAI;MACF,MAAMkB,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAA5B;MACA,MAAMd,IAAI,GAAG,MAAMa,QAAQ,CAACE,IAAT,EAAnB;MACAN,QAAQ,CAAC;QAAEL,IAAI,EAAE,UAAR;QAAoBC,OAAO,EAAEL;MAA7B,CAAD,CAAR;IACD,CAJD,CAIE,OAAOgB,KAAP,EAAc;MACdC,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAArC;IACD;EACF,CARM,EAQJ,EARI,CAAP;;EAUA,MAAME,WAAW,GAAG,MAAM;IACxB,MAAMC,QAAQ,GAAGjB,KAAK,CAACH,KAAN,KAAgB,OAAhB,GAA0B,MAA1B,GAAmC,OAApD;IACAY,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BD,QAA9B;IACAV,QAAQ,CAAC;MAAEL,IAAI,EAAE,WAAR;MAAqBC,OAAO,EAAEc;IAA9B,CAAD,CAAR;EACD,CAJD;;EAMA,MAAME,YAAY,GAAG1B,OAAO,CAAC,OAAO;IAAEI,KAAK,EAAEG,KAAK,CAACH,KAAf;IAAsBC,IAAI,EAAEE,KAAK,CAACF,IAAlC;IAAwCkB;EAAxC,CAAP,CAAD,EAAgE,CAC1FhB,KAAK,CAACH,KADoF,EAE1FG,KAAK,CAACF,IAFoF,CAAhE,CAA5B;EAKA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAAEqB;IAAF,CAA/B;IAAA,UACGb;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CApCD;;GAAMD,qB;;KAAAA,qB;AAsCN,eAAeA,qBAAf"},"metadata":{},"sourceType":"module"}